#!/bin/sh
# (c) 2003, Steve Kirkendall
# (c) 2023, Nicolas Provost <dev@npsoft.fr>

# This is a UNIX shell script that generates a custom "Makefile" file and
# a "config.h" file.

# Set some defaults
XINCPATH="/usr/include"
XLIBPATH="/lib /usr/lib /usr/local/lib "`echo "$LD_LIBRARY_PATH" | tr ':' ' '`
GNUPATH=`echo "$PATH" | tr ':' ' '`
PREFIX=/usr/local
BINDIR='$(PREFIX)/bin'
DATADIR='$(PREFIX)/share/elvis/'
DOCDIR='$(PREFIX)/share/elvis/doc/'
MANDIR='$(PREFIX)/share/man/man1/'
SYS=""
CC=""
CFLAGS="-O2 -fstack-protector-all -Isrc/"
IOCTL=""
WHY=""

# Initialize some variables.  These aren't merely defaults; don't change them!
args=""
XLIBS=""
NLIBS=""

# This function echoes its arguments, but only if the --verbose flag is given
why()
{
	if [ "$WHY" ]
	then
		echo "$@"
	fi
}

# This function exits will a fatal error message
fatal()
{
	echo "FATAL: $@"
	exit 1
}

# This function is used to look for a file in a path. $1 is the name of the
# file, and the remaining args are the path.  It write the absolute file file
# to stdout if successful
searchpath()
{
	file=$1
	shift
	for i
	do
		if [ -f $i/$file ]
		then
			echo $i/$file
			return
		fi
	done
}

#########################################################
# This function outputs a usage message, and then exits #
#########################################################
usage()
{
	echo "usage: configure [options]"
	echo "       --cc=PATH          use this C compiler"
	echo "       --bindir=DIR       where to install the executables"
	echo "       --datadir=DIR      where to install the supporting data files"
	echo "       --prefix=DIR       like --bindir=DIR/bin --datadir=DIR/share/elvis"
	echo "       --docdir=DIR       where to install documentation"
	echo "       --mandir=DIR       where to install man pages"
	echo "       --libs=STRING      non-X11 part of the LIBS= string in Makefile"
	echo "       --ioctl=VARIETY    type of tty ioctl to use: termios, termio"
	echo "       --verbose          explain any decisions made during configuration"
	echo "The default prefix is --prefix=$PREFIX"
	if [ "$*" ]
	then
		echo "$*"
	fi
	exit
}

#######################
# Check the arguments #
#######################
echo "* elvis build configuration *"
for i
do
	case "$i" in
	  --cc=*)
		CC=`echo "$i"|sed 's/^--cc=//'`
		args="$args $i"
		;;
	  --bindir=*)
		BINDIR=`echo "$i"|sed 's/^--bindir=//'`
		args="$args $i"
		;;
	  --datadir=*)
		DATADIR=`echo "$i"|sed 's/^--datadir=//'`
		args="$args $i"
		;;
	  --docdir=*)
		DOCDIR=`echo "$i"|sed 's/^--docdir=//'`
		args="$args $i"
		;;
	  --mandir=*)
		MANDIR=`echo "$i"|sed 's/^--mandir=//'`
		args="$args $i"
		;;
	  --prefix=*)
		PREFIX=`echo "$i"|sed 's/^--prefix=//'`
		args="$args $i"
		;;
	  --libs=*)
		LIBS=`echo "$i"|sed 's/^--libs=//'`
		# added to args later
		;;
	  --ioctl=termios|--ioctl=termio)
		IOCTL=`echo "$i"|sed 's/^--ioctl=//'`
		args="$args $i"
		;;
	  --ioctl=*)
		usage "bad --ioctl value; must be termios, termio"
		;;
	  --verbose)
		WHY=y
		;;
	  --help|-\?)
		usage
		;;
	  --version)
		sed -n 's/.*VERSION.*"\(.*\)\"/configure (elvis) \1/p' version.h
		sed -n 's/.*COPY1.*"\(.*\)\"/\1/p' version.h
		exit 0
		;;
	  --*)
		# Ignore other --symbol flags
		;;
	  -*)
		usage invalid option $i
		;;
	esac
done

########################
# system configuration #
########################
case "$(uname)" in
	*Linux*) SYS=linux ;;
	*FreeBSD*) SYS=freebsd ;;
	*OpenBSD*) SYS=openbsd ;;
	*NetBSD*) SYS=netbsd ;;
	*BSD*) SYS=bsd ;;
	*) fatal "operating system not supported" ;;
esac

# Find a C compiler
if test -z "$CC"
then
	T=$(clang --version 2>/dev/null)
	if test -n "$T"
	then
		CC=clang
	else
		T=$(gcc --version 2>/dev/null)
		if test -n "$T"
		then
			CC=gcc
		fi
	fi
fi
if test -z "$CC"
then
	fatal "no C compiler found"
fi

# Try to locate some files
why "Looking for some compiler files..."
inet=`searchpath netinet/in.h $XINCPATH`
case "$inet" in
  "") why "   Internet headers not found" ;;
  *) why "   Internet headers found" ;;
esac

# if network protocols are unspecified, and the network header files are
# present, then assume they should be used.
if [ "$PROTOCOL_HTTP" = "" -a "$inet" ]
then
	why "Assuming HTTP should be supported because Internet headers were found"
	PROTOCOL_HTTP=define
elif [ "$PROTOCOL_HTTP" = "" ]
then
	why "Assuming HTTP should not be supported because Internet headers were not found"
	PROTOCOL_HTTP=undef
fi
if [ "$PROTOCOL_FTP" = "" -a "$inet" ]
then
	why "Assuming FTP should be supported because Internet headers were found"
	PROTOCOL_FTP=define
elif [ "$PROTOCOL_FTP" = "" ]
then
	why "Assuming FTP should not be supported because Internet headers were not found"
	PROTOCOL_FTP=undef
fi

# Check for some known system quirks
if [ -f /usr/include/sys/ptem.h ]
then
	why "This system has a <sys/ptem.h> file so I assume elvis needs it" 
	NEED_WINSIZE=define
else
	why "This system has no <sys/ptem.h> file so I assume elvis doesn't need it"
fi
if [ -f /usr/include/termcap.h ]
then
	why "This system has a <termcap.h> file so I assume elvis needs it" 
	NEED_SPEED_T=define
else
	why "This system has no <termcap.h> file so I assume elvis doesn't need it"
fi
if [ -f /usr/include/sys/wait.h ]
then
	why "This system has a <sys/wait.h> file so I assume elvis needs it" 
	NEED_WAIT_H=define
else
	why "This system has no <sys/wait.h> file so I assume elvis doesn't need it"
fi
if [ -f /usr/include/sys/select.h ]
then
	why "This system has a <sys/select.h> file so I assume elvis needs it" 
	NEED_SELECT_H=define
else
	why "This system has no <sys/select.h> file so I assume elvis doesn't need it"
fi
if [ -f /usr/include/sys/ioctl.h ]
then
	why "This system has a <sys/ioctl.h> file so I assume elvis needs it" 
	NEED_IOCTL_H=define
else
	why "This system has no <sys/ioctl.h> file so I assume elvis doesn't need it"
fi
if [ -f /usr/include/netinet/in.h ]
then
	why "This system has a <netinet/in.h> file so I assume elvis needs it" 
	NEED_IN_H=define
else
	why "This system has no <netinet/in.h> file so I assume elvis doesn't need it"
fi
if [ -f /usr/include/sys/socket.h ]
then
	why "This system has a <sys/socket.h> file so I assume elvis needs it" 
	NEED_SOCKET_H=define
else
	why "This system has no <sys/socket.h> file so I assume elvis doesn't need it"
fi
if [ X"$xinc" != X ]
then
	if [ -f `dirname $xinc`/Xos.h ]
	then
		why "This system has a <X11/Xos.h> file so I assume elvis needs it" 
		NEED_XOS_H=define
	else
		why "This system has no <X11/Xos.h> file so I assume elvis doesn't need it"
	fi
fi
why "Does this system support setpgid()?"
if fgrep setpgid /usr/include/unistd.h >/dev/null 2>/dev/null
then
	why "   Assuming yes, because it is declared in <unistd.h>"
	NEED_SETPGID=undef
else
	why "   Assuming no, because it isn't declared in <unistd.h>"
	NEED_SETPGID=define
fi
why "Does this system support freopen()?"
if fgrep freopen /usr/include/stdio.h >/dev/null 2>/dev/null
then
	why "   Assuming yes, because it is declared in <stdio.h>"
	NEED_FREOPEN=undef
else
	why "   Assuming no, because it isn't declared in <stdio.h>"
	NEED_FREOPEN=define
fi
if [ -s "$xinc" ]
then 
	why "Does this system support XrmCombineFileDatabase()?"
	if fgrep XrmCombineFileDatabase $xinc </dev/null >/dev/null
	then
		why "   Assuming yes, because it is declared in <X11/Xresource.h>"
		NEED_XRMCOMBINEFILEDATABASE=undef
	else
		why "   Assuming no, because it isn't declared in <X11/Xresource.h>"
		NEED_XRMCOMBINEFILEDATABASE=define
	fi
fi
if [ "$PROTOCOL_HTTP" = define -o "$PROTOCOL_FTP" = define ]
then
	why "Does this system support inet_aton()?"
	if fgrep inet_aton /usr/include/arpa/inet.h </dev/null >/dev/null
	then
		why "   Assuming yes, because it is declared in <arpa/inet.h>"
		NEED_INET_ATON=undef
	else
		why "   Assuming no, because it isn't declared in <arpa/inet.h>"
		NEED_INET_ATON=define
	fi
fi
if [ "$NEED_INET_ATON" = undef ]
then
	why "Does this system require -lresolv to use inet_aton()?"
	if [ "`searchpath libresolv.a $XLIBPATH`" = "" ]
	then
		why "   Assuming no, because I couldn't find libresolv.a"
	else
		why "   Assuming yes, because I found libresolv.a"
		NLIBS="$NLIBS -lresolv"
	fi
fi
why "Does this system support memmove()?"
if fgrep memmove /usr/include/string*.h </dev/null >/dev/null
then
	why "   Assuming yes, because it is declared in <string.h> or <strings.h>"
	NEED_MEMMOVE=undef
else
	why "   Assuming no, because it isn't declared in <string.h> or <strings.h>"
	NEED_MEMMOVE=define
fi
case "$IOCTL" in
  termios)	USE=			;;
  termio)	USE=" -DUSE_TERMIO"	;;
  *)
	why "Choosing a type of ioctl() calls, since no --ioctl=... argument was given"
	if [ -f /usr/include/termios.h ]
	then
		USE=
		args="$args --ioctl=termios"
		why "   Assuming --ioctl=termios because <termios.h> exists"
	else
		if [ -f /usr/include/termio.h ]
		then
			USE=" -DUSE_TERMIO"
			args="$args --ioctl=termio"
			why "   Assuming --ioctl=termio because <termio.h> exists"
		fi
	fi
	;;
esac
case "$SYS" in
  linux)
	if [ ! -f /usr/lib/libtermcap.a -a ! -f /lib/libtermcap.a ]
	then
		if [ -f /usr/lib/libncurses.a -o -f /usr/lib/ncurses.a ]
		then
			why "For Linux, we're using ncurses because there is no termcap library"
			TLIBS="-lncurses"
		else
			why "For Linux, we're using curses because there is no termcap library"
			TLIBS="-lcurses"
		fi
	else
		why "For Linux, we're using termcap because I prefer it over curses/terminfo"
	fi
	if [ "$NEED_SELECT_H" = "define" ]
	then
		why "For Linux, elvis never needs <sys/select.h> so I'm ignoring it on your system"
		NEED_SELECT_H=undef
	fi
	;;

  freebsd|bsd)
	why "For BSD, we ignore the <sys/select.h> file"
	NEED_SELECT_H="undef"
	;;

  *openbsd*)
	why "For OpenBSD, we ignore the <sys/select.h> file"
	NEED_SELECT_H="undef"
	TLIBS="-lcurses"
	;;

  *cygwin*)
	why "Cygwin has no inet_aton() function even though one is declared in the headers"
	NEED_INET_ATON=define
	;;
esac
if [ -f /usr/bin/lp ]
then
	why "Assuming lpout=\"!lp -s\" because /usr/bin/lp exists"
	LPOUT="!lp -s"
else
	why "Assuming lpout=\"!lpr\" because /usr/bin/lp doesn't exist"
fi

# Add non-X11 libraries to args via the --libs=... flag
if [ "$TLIBS" ]
then
	args="$args --libs='$TLIBS'"
fi

# Tell the user what we discovered
echo "Options: $args"
echo "System:   $SYS"
echo "Compiler: $CC"
echo "Bin dir:  "`echo "$BINDIR" |sed s,'$(PREFIX)',"$PREFIX",`
echo "Data dir: "`echo "$DATADIR"|sed s,'$(PREFIX)',"$PREFIX",`
echo "Doc dir:  "`echo "$DOCDIR" |sed s,'$(PREFIX)',"$PREFIX",`
echo "Man dir:  "`echo "$MANDIR" |sed s,'$(PREFIX)',"$PREFIX",`

#Set some options that'll be used in the here-files below
CC="$CC$USE"
if [ "$LIBS" = "" ]
then
	LIBS="${TLIBS:--ltermcap} $NLIBS"
fi
case "$LIBS" in
  *ncurses*) NEED_BC=undef;;
  *)	     NEED_BC=define;;
esac


################################
# Generate the "config.h" file #
################################
ELVISPATH=`echo "~/.elvis:/etc/elvis:$DATADIR:$DOCDIR" | sed s,'$(DATADIR)',"$DATADIR",g\;s,'$(PREFIX)',"$PREFIX",g`
cat >src/config.h <<eof-config
/* config.h
 *
 * This file contains C macro definitions which indicate which features
 * are to be supported, and which library functions are to be emulated.
 * In general, #define enables the feature or emulating function, and
 * #undef disables the feature or causes the library function to be used.
 */


/* The following determine which user interfaces are to be supported */
#undef	GUI_GNOME	/* Pretty GNOME user interface */
#undef	GUI_X11		/* simple X-windows interface */
#undef	GUI_CURSES	/* curses interface */
#define	GUI_TERMCAP	/* termcap interface */
#define	GUI_OPEN	/* open-mode only, does nothing fancy */


/* These allow you to selectively disable the display modes, network protocols,
 * and other optional features.  If you disable the markup display modes then
 * the :help command is disabled because it depends on the "html" markup display
 * mode.  #define to enable the mode, #undef to exclude it.
 */
#define	DISPLAY_HEX	/* hex		interactive hex dump */
#define	DISPLAY_HTML	/* html		formatted text */
#define	DISPLAY_MAN	/* man		formatted text */
#define	DISPLAY_TEX	/* tex		formatted text */
#define	DISPLAY_SYNTAX	/* syntax	generic syntax coloring */
#${PROTOCOL_HTTP}	PROTOCOL_HTTP	/* define to enable HTTP; undef to disable */
#${PROTOCOL_FTP}	PROTOCOL_FTP	/* define to enable FTP; undef to disable */
#define	FEATURE_ALIAS	/* the :alias command */
#define	FEATURE_ARRAY	/* arrays in :calc expressions */
#define	FEATURE_AUTOCMD	/* the :autocmd command */
#define	FEATURE_BACKTICK /* the \`program\` notation in file names */
#define	FEATURE_BROWSE	/* the :browse and :sbrowse commands */
#define	FEATURE_CACHEDESC /* store syntax/markup descriptions in RAM */
#define	FEATURE_CALC	/* built-in calculator -- see command below */
#define	FEATURE_COMPLETE /* filename completion */
#define	FEATURE_EQUALTILDE /* :let option =~ excmdline */
#define	FEATURE_FOLD	/* the :fold and :unfold commands */
#define	FEATURE_G	/* most of the visual 'g' commands */
#define	FEATURE_HLOBJECT /* the hlobject and hllayers options */
#define	FEATURE_HLSEARCH  /* the hlsearch option */
#undef	FEATURE_IMAGE	/* background images in x11 */
#define	FEATURE_INCSEARCH /* the incsearch option */
#define	FEATURE_LISTCHARS /* the "listchars" option */
#define	FEATURE_LITRE	/* accelerate searches for literal strings */
#define	FEATURE_LPR	/* the :lpr command */
#define	FEATURE_MAKE	/* the :make and :cc commands */
#define	FEATURE_MAPDB	/* the map debugger */
#define	FEATURE_MISC	/* lots of little things -- see comment below */
#define	FEATURE_MKEXRC	/* the :mkexrc command */
#define	FEATURE_NORMAL	/* vim-style :normal command */
#define	FEATURE_PROTO	/* using aliases to add new protocols */
#define	FEATURE_RAM	/* store edit buffer in RAM */
#define	FEATURE_RCSID	/* include RCS Id strings for all source files */
#define FEATURE_REGION	/* the :region and :unregion commands */
#define	FEATURE_SHOWTAG	/* the showtag option */
#define	FEATURE_SMARTARGS /* the smartargs option */
#define	FEATURE_SPELL	/* spell-checker */
#define	FEATURE_SPLIT	/* :split and friends */
#define	FEATURE_STDIN	/* ability to read from stdin for "-" filename */
#define	FEATURE_TAGS	/* :tag command -- undef'ing will break ref & ctags */
#define	FEATURE_TEXTOBJ	/* text objects */
#define	FEATURE_V	/* the v/V/^V marking commands */
#undef	FEATURE_XFT	/* support antialiased fonts in "x11" */

/* The FEATURE_CALC option, above, controls whether the calculator and all of
 * the features that depend on it should be included in elvis.  You almost
 * certainly want to leave it defined, except on a tiny "rescue" system,
 * since undef'ing it will disable the following features:
 *  o The :calc, :case, :default, :do, :eval, :for, :if, :let, :switch, and
 *    :while commands.  (But :then and :else are still supported for :try)
 *  o The elvis.ini, elvis.brf, elvis.arf, elvis.bwf, elvis.awf initialization
 *    scripts (though ~/.exrc will still be sourced, and elvis will use some
 *    hardcoded rules to guess an appropriate bufdisplay setting.)
 *  o The ability to compute buffer names via :(=expression)
 *  o Expansion of environment variables in file names.
 *  o Some parts of messages and browser headers.
 *  o Ability to use \$1 and \$2 in keywordprg, makeprg, and ccprg options.
 */

/* The FEATURE_MISC option, above, controls a large number of features which
 * are handy in normal daily use, but might not be needed on a tiny "rescue"
 * system.  Undef'ing FEATURE misc will disable the following features:
 *  o The :@, :all, :bb, :bu, :help, :local, :stack, :window, and :z commands
 *  o Session recovery after elvis crashes (the -r command line flag)
 *  o In "termcap" gui: Graphic chars, Shift & Alt F-key labels, xterm retitling
 *  o Screen update optimization
 *  o Support for mouse clicks and scrollbars
 *  o Expansion of "~user" in a filename.  (plain old "~" still works though)
 */

/* The following provide custom implementations of some common functions which
 * are either missing or poorly implemented on some systems.
 */
#undef	NEED_ABORT	/* replaces abort() with a simpler macro */
#undef	NEED_ASSERT	/* defines a custom assert() macro */
#${NEED_TGETENT:-undef}	NEED_TGETENT	/* causes tinytcap.c to be used instead of library */
#${NEED_WINSIZE:-undef}	NEED_WINSIZE	/* includes <ptem.h> -- required by SCO */
#${NEED_SPEED_T:-undef}	NEED_SPEED_T	/* includes <termcap.h> -- common on POSIX systems */
#${NEED_STRDUP:-undef}	NEED_STRDUP	/* uses a custom version of strdup() */
#${NEED_MEMMOVE:-undef}	NEED_MEMMOVE	/* uses a custom version of memmove() */
#${NEED_OSPEED:-undef}	NEED_OSPEED	/* causes guitcap.c to supply an ospeed variable */
#${NEED_BC:-undef}	NEED_BC		/* causes guitcap.c to supply a BC variable */
#${NEED_SETPGID:-undef}	NEED_SETPGID	/* use setpgrp() instead of setpgid() */
#${NEED_FREOPEN:-undef}	NEED_FREOPEN	/* use close()/dup()instead of freopen() */
#define	NEED_CTYPE	/* uses a custom <ctype.h>, driven by :digraph */
#${NEED_WAIT_H:-undef}	NEED_WAIT_H	/* must include <sys/wait.h> */
#${NEED_SELECT_H:-undef}	NEED_SELECT_H	/* must include <sys/select.h> */
#${NEED_IOCTL_H:-undef}	NEED_IOCTL_H	/* must include <sys/ioctl.h> */
#${NEED_XOS_H:-undef}	NEED_XOS_H	/* must include <X11/Xos.h> */
#${NEED_IN_H:-undef}	NEED_IN_H	/* must include <netinet/in.h> */
#${NEED_SOCKET_H:-undef}	NEED_SOCKET_H	/* must include <sys/socket.h> */
#${NEED_XRMCOMBINEFILEDATABASE:-undef}	NEED_XRMCOMBINEFILEDATABASE	/* X11R4 needs this */
#${NEED_INET_ATON:-undef}	NEED_INET_ATON	/* SunOS, Solaris, and Cygwin need this */

/* The following control debugging features.  NDEBUG slows elvis down a lot,
 * and the others tend to make it output some confusing messages, so these
 * are all disabled by default.  (Note that NDEBUG is #define'd to disable it)
 */
#define	NDEBUG		/* undef to enable assert() calls */
#undef	DEBUG_ALLOC	/* define to debug memory allocations */
#undef	DEBUG_SCAN	/* define to debug character scans */
#undef	DEBUG_SESSION	/* define to debug the block cache */
#undef	DEBUG_EVENT	/* define to trace events */
#undef	DEBUG_MARKUP	/* define to debug markup display modes */
#undef	DEBUG_REGEXP	/* define to debug regular expressions */
#undef	DEBUG_MARK	/* define to debug marksetbuffer() usage */
#undef	DEBUG_REGION	/* define to debug regions */



/* The following macros, and their values, are mostly used to determine the
 * default values of some options.
 */
#define	OSLPOUT	"${LPOUT:-!lpr}"	/* default value of lpout option */
#define OSLIBPATH "${ELVISPATH}"	/* default elvispath */
eof-config


####################################################################
# Generate a sed script for converting "Makefile.in" to "Makefile" #
####################################################################
tmp=mfsed.$$
cat >$tmp <<eof-all
s!^# Makefile.in\$!# Makefile - configured for $SYS!
s!^CC=.*!CC=$CC!
s!^CFLAGS=.*!CFLAGS=$CFLAGS!
s!^LIBS=.*!LIBS=$GNOMELIBS $XLIBS $LIBS!
s!^PREFIX=.*!PREFIX=$PREFIX!
s!^BINDIR=.*!BINDIR=$BINDIR!
s!^DATADIR=.*!DATADIR=$DATADIR!
s!^DOCDIR=.*!DOCDIR=$DOCDIR!
s!^MANDIR=.*!MANDIR=$MANDIR!
eof-all

mkdir -p out
rm -f out/* src/*.o

# Run "Makefile.in" through that sed script, to produce "Makefile"
sed -f $tmp Makefile.in >Makefile && rm $tmp

