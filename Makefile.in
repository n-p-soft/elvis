# Makefile.in
# $Id: Makefile.in,v 2.121 2003/10/21 02:31:00 steve Exp $
#
# Makefile.in should not be modified!  The "configure" script reads Makefile.in
# and writes a customized Makefile by editing the values of the following
# macros.  If the "configure" script doesn't support your version of UNIX,
# I suggest you do a plain "configure unix" and then hand-edit the resulting
# Makefile.  That will also create a "config.h" file which may require some
# tweaking.

################################################################################
# This is the name of the compiler, along with any flags that should be used
# both for compiling and for linking.  Typical values are "cc -g" or "cc -O".
# If you're compiling with X-windows support, you may need to add a
# "-I/usr/X11/include" flag or something similar.
#CC=gcc -g -Wall -pedantic -Wtraditional -Wpointer-arith -Wstrict-prototypes -Wmissing-prototypes -I/usr/include/freetype2 -I/usr/X11R6/include
CC=cc -O

################################################################################
# This macro gives any arguments which will be needed during linking.
# Mostly, this means "-Llibdir" and "-llib" flags.  If you're compiling with
# X-windows support, then you'll have to add a "-lX11" and maybe a
# "-L/usr/X11/lib" flag or something similar.
LIBS=-ltermcap

################################################################################
# This should be "unix" for all UNIX variants.  It causes the compiler to use
# files from the osunix subdirectory, and do a UNIX-style installation.
OS=unix

################################################################################
# This is a command for compiling files in a subdirectory, and placing the
# resultant object files in the current directory.  Most UNIX compilers behave
# this way naturally, so you probably won't need to modify this.
OSCC=$(CC) -I. $(CFLAGS) $(FLAGC)

################################################################################
# This is the separator between a subdirectory name and a file name.  For UNIX
# this should always be a "/" character.
SLASH=/

################################################################################
# This is the file name extension for object files.  For UNIX, this is almost
# always ".o"
OBJ=.o

################################################################################
# This is the file name extension for executable files.  For UNIX, this is
# always a null string because UNIX doesn't use file name extensions to mark
# executable files.
EXE=

################################################################################
# This is the shell command which is used for deleting a file if it exists.
# The "-f" causes "rm" to be silent if the file doesn't exist.
RM=rm -f

################################################################################
# This is the compiler flag which causes compilation but not linking.  For
# most UNIX compilers, this is "-c".
FLAGC=-c

################################################################################
# This is the compiler flag for adding a directory to the list of directories
# to be searched for #include files.  For most UNIX compilers, this is "-I".
FLAGI=-I

################################################################################
# This is a list of programs to be created by "make all".  The possible list
# includes elvis$(EXE), ref$(EXE), ctags$(EXE), elvtags$(EXE), and fmt$(EXE).
# ctags and elvtags are the same program under different names.  The $(EXE) on
# the end is just in case this Makefile is reconfigured for an operating
# system which requires the EXE macro to be something like ".exe".
ALL=elvis$(EXE) ref$(EXE) elvtags$(EXE) elvfmt$(EXE)

################################################################################
# The installation directories are relative to this
DESTDIR=
PREFIX=/usr/local

################################################################################
# This is the directory where "make install" will place the executable programs
BINDIR=$(PREFIX)/bin

################################################################################
# This is the directory where "make install" will place elvis' support files,
# such as the help text and the default initialization scripts.  If you change
# the value here, then you also need to change it in "config.h"
DATADIR=$(PREFIX)/share/elvis
DOCDIR= $(PREFIX)/share/elvis/doc
MANDIR=$(PREFIX)/share/man1

################################################################################
# This is the shell command for copying one file to another
CP=cp

###############################################################################
###############################################################################
###############################################################################
###########                                                         ###########
###########                         S T O P !                       ###########
###########                                                         ###########
###########  You shouldn't need to modify anything below this line  ###########
###########                                                         ###########
###############################################################################
###############################################################################
###############################################################################

###############################################################################
# Portable compilation rules

VERSION=2.2_0
MISC=	BUGS README.html COPYING INSTALL Makefile.in configure instman.sh\
	elvis.lsm e2 \
	elvis.spec.in Announce-$(VERSION)
OSSRCS=	os$(OS)$(SLASH)osblock.c os$(OS)$(SLASH)osdir.c\
	os$(OS)$(SLASH)osprg.c os$(OS)$(SLASH)ostext.c\
	os$(OS)$(SLASH)osnet.c os$(OS)$(SLASH)tcaphelp.c
OSOBJS=	osblock$(OBJ) osdir$(OBJ) osprg$(OBJ) ostext$(OBJ) osnet$(OBJ)
OSOBJS2=tcaphelp$(OBJ)
OSHDRS=	os$(OS)$(SLASH)osdef.h
GUISRCS=guicurs.c guiopen.c guitcap.c
GUIOBJS=guicurs$(OBJ) guiopen$(OBJ) guitcap$(OBJ)

LPSRCS=	lpescape.c lpovrtyp.c lpps.c
LPOBJS=	lpescape$(OBJ) lpovrtyp$(OBJ) lpps$(OBJ)
HDRS=	$(OSHDRS) $(GUIHDRS) autocmd.h buffer.h buffer2.h calc.h color.h\
	cut.h descr.h digraph.h display.h display2.h draw.h draw2.h elvis.h\
	elvisio.h event.h ex.h gui.h gui2.h input.h lowbuf.h lp.h map.h\
	mark.h message.h message2.h misc.h more.h move.h need.h operator.h\
	opsys.h optglob.h options.h regexp.h region.h safe.h scan.h session.h\
	spell.h state.h state2.h tag.h tagsrch.h tagelvis.h version.h vi.h\
	vicmd.h window.h config.h
SRCS=	$(OSSRCS) $(GUISRCS) $(LPSRCS) autocmd.c buffer.c calc.c color.c cut.c\
	descr.c digraph.c display.c dmhex.c dmmarkup.c dmnormal.c dmsyntax.c\
	draw.c event.c ex.c exaction.c exconfig.c exedit.c exmake.c exsubst.c\
	fold.c ftp.c gui.c http.c input.c io.c lowbuf.c lp.c main.c map.c\
	mark.c message.c misc.c more.c move.c need.c operator.c optglob.c\
	options.c regexp.c region.c regsub.c safe.c scan.c search.c session.c\
	spell.c state.c tag.c tagsrch.c tagelvis.c url.c vi.c vicmd.c window.c
OBJ1=	$(OSOBJS) optglob$(OBJ) options$(OBJ) safe$(OBJ) session$(OBJ)
OBJ2=	buffer$(OBJ) calc$(OBJ) color$(OBJ) descr$(OBJ) digraph$(OBJ)\
	display$(OBJ) gui$(OBJ) lowbuf$(OBJ) mark$(OBJ) misc$(OBJ) io$(OBJ)\
	dmhex$(OBJ) dmmarkup$(OBJ) dmnormal$(OBJ) dmsyntax$(OBJ) scan$(OBJ)
OBJ3=	$(OSOBJS2) autocmd$(OBJ) cut$(OBJ) draw$(OBJ) event$(OBJ) ex$(OBJ)\
	exaction$(OBJ) exconfig$(OBJ) exedit$(OBJ) exmake$(OBJ) exsubst$(OBJ)\
	fold$(OBJ) ftp$(OBJ) http$(OBJ) input$(OBJ) lp$(OBJ) map$(OBJ)\
	message$(OBJ) move$(OBJ) more$(OBJ) need$(OBJ) operator$(OBJ)\
	regexp$(OBJ) region$(OBJ) regsub$(OBJ) search$(OBJ) spell$(OBJ)\
	state$(OBJ) tinytcap$(OBJ) tag$(OBJ) tagsrch$(OBJ) tagelvis$(OBJ)\
	url$(OBJ) vi$(OBJ) vicmd$(OBJ) window$(OBJ)
OBJS=	$(OBJ1) $(OBJ2) $(OBJ3)
REFOBJS=ref$(OBJ) tag$(OBJ) tagsrch$(OBJ) safe$(OBJ)
CTOBJS=	ctags$(OBJ) tag$(OBJ) safe$(OBJ)
CFLAGS=	$(FLAGI)os$(OS)
EVERY=	$(ALL) verify$(EXE) elvdump$(EXE) calc$(EXE)
SHELL=	/bin/sh

DISTRIB=elvis-$(VERSION)

all: $(ALL)

every: $(EVERY)

elvis$(EXE): $(HDRS) main$(OBJ) $(OBJS) $(GUIOBJS) $(LPOBJS)
	$(CC) $(CFLAGS) main$(OBJ) $(OBJS) $(GUIOBJS) $(LPOBJS) $(LIBS) -o elvis$(EXE)

ctags$(EXE): $(CTOBJS)
	$(CC) $(CFLAGS) $(CTOBJS) -o ctags$(EXE)

doc/elvtags.man: doc/ctags.man
	sed 's/\<CTAGS\>/ELVTAGS/g; s/ctags\>/elvtags/g; s/ant" elvtags/ant" ctags/' doc/ctags.man >doc/elvtags.man

elvtags$(EXE): ctags$(EXE)
	$(CP) ctags$(EXE) elvtags$(EXE)

elvfmt$(EXE) doc/elvfmt.man: fmt$(EXE) doc/fmt.man
	$(CP) fmt$(EXE) elvfmt$(EXE)
	sed 's/\<FMT\>/ELVFMT/g; s/\<fmt\>/elvfmt/g' doc/fmt.man >doc/elvfmt.man

ref$(EXE): $(REFOBJS)
	$(CC) $(CFLAGS) $(REFOBJS) -o ref$(EXE)

fmt$(EXE): fmt.c os$(OS)$(SLASH)osdir.c
	$(CC) $(CFLAGS) fmt.c -o fmt$(EXE)

verify$(EXE): $(HDRS) verify$(OBJ) $(OBJ1) $(OBJ2)
	$(CC) $(CFLAGS) verify$(OBJ) $(OBJ1) $(OBJ2) -o verify$(EXE)

elvdump$(EXE): $(HDRS) elvdump$(OBJ) $(OBJ1)
	$(CC) $(CFLAGS) elvdump$(OBJ) $(OBJ1) -o elvdump$(EXE)

calc: $(HDRS) calc.c
	$(CC) $(CFLAGS) -DTRY calc.c -o calc

###############################################################################
# Rules for os-dependent files

osblock$(OBJ): os$(OS)$(SLASH)osblock.c
	$(OSCC) os$(OS)$(SLASH)osblock.c

osdir$(OBJ): os$(OS)$(SLASH)osdir.c
	$(OSCC) os$(OS)$(SLASH)osdir.c

osprg$(OBJ): os$(OS)$(SLASH)osprg.c
	$(OSCC) os$(OS)$(SLASH)osprg.c

ostext$(OBJ): os$(OS)$(SLASH)ostext.c
	$(OSCC) os$(OS)$(SLASH)ostext.c

osnet$(OBJ): os$(OS)$(SLASH)osnet.c
	$(OSCC) os$(OS)$(SLASH)osnet.c

tcaphelp$(OBJ): os$(OS)$(SLASH)tcaphelp.c
	$(OSCC) os$(OS)$(SLASH)tcaphelp.c


###############################################################################
# Handy commands

clean: clean.$(OS)
	$(RM) $(ALL)

clean.unix:
	$(RM) *$(OBJ)
	$(RM) guignome/*$(OBJ) guignome/elvisCorba-* guignome/elvisCorba.h
	$(RM) core
	$(RM) errlist
	$(RM) verify.elv
	$(RM) gdk_imlib.h
	$(RM) $(DISTRIB).tar.gz
	$(RM) doc/elvtags.man
	$(RM) elvis.rpm

clobber: clean
	$(RM) $(EVERY)
	$(RM) tags
	$(RM) detail
	$(RM) .elv*
	$(RM) foo
	$(RM) stderr

tmp:
	$(RM) /var/tmp/elvis*.ses
	$(RM) core

sure: verify
	$(RM) verify.elv
	verify >detail || gdb verify core

wc: $(SRCS) $(HDRS)
	wc $(SRCS) $(HDRS) | sort -n

tags: $(SRCS) $(HDRS)
	elvtags $(SRCS) $(HDRS)

ciall: $(SRCS) $(HDRS)
	ci -u$(REV) Makefile $(SRCS) $(HDRS)

cinever:
	@for i in *.[ch]; do [ -f RCS/$$i,v ] || echo $$i; done
	@for i in os*/.; do (cd $$i; for j in *.[ch]; do [ -f $$j,v -o -f RCS/$$j,v ] || echo `dirname $$i`/$$j; done); done

tarball:
	rm -f $(DISTRIB).tar.gz
	make $(DISTRIB).tar.gz

$(DISTRIB).tar.gz:
	rm -rf $(DISTRIB)
	mkdir $(DISTRIB)
	for i in os*; do if [ -d $$i ]; then mkdir $(DISTRIB)/$$i; fi; done
	for i in gui*; do if [ -d $$i ]; then mkdir $(DISTRIB)/$$i; fi; done
	cp *.c *.h $(MISC) $(DISTRIB)
	rm -f $(DISTRIB)/sample.c
	mkdir $(DISTRIB)/data
	cp data/*.* $(DISTRIB)/data/
	for i in icons scripts stubs themes; do mkdir $(DISTRIB)/data/$$i; cp data/$$i/* $(DISTRIB)/data/$$i/; done
	mkdir $(DISTRIB)/doc
	cp doc/*.* $(DISTRIB)/doc
	chmod +w $(DISTRIB)/doc/*
	for i in doc/*.html; do sed 's/<title>Elvis[^ ]*/<title>Elvis-$(VERSION)/;s/ELVIS[^ <]*</ELVIS-$(VERSION)</' $$i >$(DISTRIB)/$$i; done
	for i in doc/*.man; do sed 's/Elvis 2\.[0-9x][0-9a-z-]*/Elvis $(VERSION)/' $$i >$(DISTRIB)/$$i; done
	for i in os*/*.c os*/*.h os*/*.mak os*/*.lib os*/*.ICO; do cp $$i $(DISTRIB)/$$i; done
	for i in gui*/*; do if [ -f $$i ]; then cp $$i $(DISTRIB)/$$i; fi; done
	rm -f $(DISTRIB)/osunix/osconfig.h
	rm -f $(DISTRIB)/config.h
	rm -f $(DISTRIB)/Makefile
	rm -f $(DISTRIB)/doc/elvtags.man
	rm -f $(DISTRIB)/doc/elvfmt.man
	find $(DISTRIB) -type f -exec chmod +w {} \;
	tar czf $(DISTRIB).tar.gz $(DISTRIB)
	rm -rf $(DISTRIB)


doc$(SLASH)elvistrs.msg: $(SRCS)
	sed -n '/%[cds]/d; s/\[[a-zA-Z]*\]//; s/\\\\/\\/g; s/.*msg(MSG_[A-Z]*, "\([^ 	"][^"]*\)".*/\1/p' *.c os*$(SLASH)*.c gui*$(SLASH)*.c | sort -u >doc$(SLASH)elvistrs.msg

###############################################################################

install: install.$(OS)

install.unix: $(ALL) doc/elvtags.man
	rm -f doc/*.bak
	[ -d $(DESTDIR)/$(BINDIR) ] || mkdir $(DESTDIR)/$(BINDIR)
	cp $(ALL) $(DESTDIR)/$(BINDIR)
	(cd $(DESTDIR)/$(BINDIR); chmod 0755 $(ALL))
	rm -rf $(DESTDIR)/$(DATADIR)
	mkdir -p $(DESTDIR)/$(DATADIR)
	cp data/*.* $(DESTDIR)/$(DATADIR)
	for i in icons scripts stubs themes; do mkdir $(DESTDIR)/$(DATADIR)/$$i; cp data/$$i/* $(DESTDIR)/$(DATADIR)/$$i/; done
	rm -rf $(DESTDIR)/$(DOCDIR)
	mkdir -p $(DESTDIR)/$(DOCDIR)
	mkdir -p $(DESTDIR)/$(MANDIR)
	cp doc/*.html $(DESTDIR)/$(DOCDIR)
	cp doc/*.man $(DESTDIR)/$(MANDIR)
	cp doc/*.txt $(DESTDIR)/$(DOCDIR)
	cp doc/elvistrs.msg $(DESTDIR)/$(DOCDIR)
	cp doc/printdoc.bat $(DESTDIR)/$(DOCDIR)
	find $(DESTDIR)/$(DATADIR) -type f -exec chmod 0644 {} \;
	find $(DESTDIR)/$(DOCDIR) -type f -exec chmod 0644 {} \;
	(cd doc; for i in *.html; do sed 's/<title>Elvis[^ ]*/<title>Elvis-$(VERSION)/;s/ELVIS[^ <]*</ELVIS-$(VERSION)</' $$i > $(DESTDIR)/$(DOCDIR)/$$i; done)
	(cd doc; for i in *.man; do sed 's/Elvis 2\.[0-9x][0-9a-z-]*/Elvis $(VERSION)/' $$i >$(DESTDIR)/$(DOCDIR)/$$i; done)
	-(cd $(DESTDIR)/$(DATADIR); $(DESTDIR)/$(BINDIR)/elvtags -gitv stubs/*.c || ctags stubs/*.c)
	chmod 0755 $(DESTDIR)/$(DATADIR)/*/. $(DESTDIR)/$(DATADIR) $(DESTDIR)/$(DOCDIR)
	sh instman.sh -p$(PREFIX) $(ALL)
	-[ -d $(DESTDIR)/etc/elvis ] || mkdir $(DESTDIR)/etc/elvis
	-chmod 0755 $(DESTDIR)/etc/elvis/
	-@ : >$(DESTDIR)/etc/elvis/README && ( \
	  echo "This directory contains system-dependent versions of elvis' configuration" \
	  echo "files.  The standard versions are available in $(DATADIR)"  \
	  echo "To customize any of these configuration files for this system,"  \
	  echo "first copy the standard version of the file into /etc/elvis and" \
	  echo "then edit the copy.  Leave the standard version unchanged." \
	) >>$(DESTDIR)//etc/elvis/README
	-chmod 0644 $(DESTDIR)/etc/elvis/README
	@echo "This directory contains the standard versions of elvis' configuration" >$(DESTDIR)/$(DATADIR)/README
	@echo "files.  DO NOT MODIFY THESE FILES!  To perform host-specific customization," >>$(DESTDIR)/$(DATADIR)/README
	@echo "copy files from this directory into /etc/elvis/, and then modify the copies." >>$(DESTDIR)/$(DATADIR)/README
	@echo "To make user-specific changes, create a ~/.elvis/ directory (if it doesn't" >>$(DESTDIR)/$(DATADIR)/README
	@echo "exist already) and copy files from this directory into ~/.elvis/ and then" >>$(DESTDIR)/$(DATADIR)/README
	@echo "modify the copies.  Any file that elvis finds in ~/.elvis/ or /etc/elvis/" >>$(DESTDIR)/$(DATADIR)/README
	@echo "overrides the similarly named file in this directory." >>$(DESTDIR)/$(DATADIR)/README
	chmod 0644 $(DESTDIR)/$(DATADIR)/README


###############################################################################

uninstall: uninstall.$(OS)

uninstall.unix:
	(cd $(BINDIR); $(RM) $(ALL))
	rm -rf $(DATADIR)
	rm -rf $(DOCDIR)
	sh instman.sh -r -p$(PREFIX) $(ALL)

